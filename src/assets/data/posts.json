{   
   "personLinks": {
      "Vanessa Kasminoff": "https://github.com/VanessaKasminoff"
   },
    "posts": [
        {
            "hide": false,
            "connectedToProject": "moefingers.github.io",
            "path": "portfolio",

            "title": "A Long Journey Through My SPA Blog/Portfolio",
            "author": "alph.test. Mohammad",
            "createdAt": "2024-05-26T01:00:00Z",
            "updatedAt": "2024-05-28T00:16:54.821Z",
            "reactElementContent": {
                "type": "div",
                "props": {
                   "className": "html-area"
                },
                "children": [
                   {
                      "type": "style",
                      "props": {
                         "className": ""
                      },
                      "children": ".html-area {background: green;}"
                   },
                   {
                      "type": "h1",
                      "props": {
                         "className": ""
                      },
                      "children": "$$$title$$$"
                   },
                   {
                      "type": "p",
                      "props": {
                         "className": "post"
                      },
                      "children": "By: $$$author$$$"
                   },
                   {
                      "type": "p",
                      "props": {
                         "className": "post date created"
                      },
                      "children": "Posted: $$$$createdAt$$$"
                   },
                   {
                      "type": "p",
                      "props": {
                         "className": "post date updated"
                      },
                      "children": "Last Edited: $$$$updatedAt$$$"
                   },
                   {
                      "type": "div",
                      "props": {
                         "className": "div test one"
                      },
                      "children": [
                         {
                            "type": "div",
                            "props": {
                               "className": "nested div"
                            },
                            "children": "You may notice this page looks really off. That's by design. It's not done. For now, it's a placeholder. Go see another post instead!"
                         },
                         {
                            "type": "div",
                            "props": {
                               "className": "nested div"
                            },
                            "children": "hey"
                         }
                      ]
                   }
                ]
             }
        },
        {
         "hide": false,
         "connectedToProject": "how-many-commits-do-i-have",
         "path": "getting-all-commits",

         "title": "Getting All Commits For A User in GitHub",
         "author": "Mohammad Zuiter",
         "editor": "Vanessa Kasminoff",
         "createdAt": "2024-05-28T22:05:39.289Z",
         "updatedAt": "2024-05-29T03:47:25.005Z",
         "reactElementContent": {
            "type": "div",
            "props": {
               "className": "html-area",
               "class": "html-area"
            },
            "children": [
               {
                  "type": "section",
                  "props": {
                     "className": "header",
                     "class": "header"
                  },
                  "children": [
                     {
                        "type": "h1",
                        "props": {
                           "className": "post title",
                           "class": "post title"
                        },
                        "children": [
                           "$$$title$$$"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": "post author",
                           "class": "post author"
                        },
                        "children": [
                           "By: $$$author$$$"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": "post editor",
                           "class": "post editor"
                        },
                        "children": [
                           "Editor: ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "editorlinktag": "true"
                              },
                              "children": [
                                 "$$$editor$$$"
                              ]
                           }
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": "post date created",
                           "class": "post date created"
                        },
                        "children": [
                           "Posted: $$$createdAt$$$"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": "post date updated",
                           "class": "post date updated"
                        },
                        "children": [
                           "Last Edited: $$$updatedAt$$$"
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "index",
                     "class": "index"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Index"
                        ]
                     },
                     {
                        "type": "a",
                        "props": {
                           "className": "",
                           "href": "#/Posts/getting-all-commits#intro"
                        },
                        "children": [
                           "Introduction"
                        ]
                     },
                     {
                        "type": "a",
                        "props": {
                           "className": "",
                           "href": "#/Posts/getting-all-commits#the-plan"
                        },
                        "children": [
                           "The Plan"
                        ]
                     },
                     {
                        "type": "a",
                        "props": {
                           "className": "",
                           "href": "#/Posts/getting-all-commits#documentation"
                        },
                        "children": [
                           "Reading The Documentation"
                        ]
                     },
                     {
                        "type": "a",
                        "props": {
                           "className": "",
                           "href": "#/Posts/getting-all-commits#the-initial-request"
                        },
                        "children": [
                           "The Initial Request"
                        ]
                     },
                     {
                        "type": "a",
                        "props": {
                           "className": "",
                           "href": "#/Posts/getting-all-commits#follow-up-request"
                        },
                        "children": [
                           "The Follow-Up Request"
                        ]
                     },
                     {
                        "type": "a",
                        "props": {
                           "className": "",
                           "href": "#/Posts/getting-all-commits#the-output"
                        },
                        "children": [
                           "Seeing The Output"
                        ]
                     },
                     {
                        "type": "a",
                        "props": {
                           "className": "",
                           "href": "#/Posts/getting-all-commits#afterword"
                        },
                        "children": [
                           "Afterword, GitHub Link"
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "",
                     "id": "/Posts/getting-all-commits#intro"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Intro"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "I was applying for a job that highlighted the ability to use GitHub or other version control systems, as well as the ability to use APIs."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "I've used GitHub, and I've had recent experience with their API. So I figured why not pair the two and slap another thing onto my resume."
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "",
                     "id": "/Posts/getting-all-commits#the-plan"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "The Plan"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "From the logic I wrote in my ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "href": "/#/Projects",
                                 "target": "_blank"
                              },
                              "children": [
                                 "Projects"
                              ]
                           },
                           " section, I knew there was a particular url from the API to get all the commits for a particular repository."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "So the plan was, to get all the repositories for a user, then get all the commits for each repository, and finally add them all up."
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "",
                     "id": "/Posts/getting-all-commits#documentation"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Reading The Documentation"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Let's look at the documentation together to find out how to get the repositories for a given user. ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "href": "https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-repositories-for-a-user",
                                 "target": "_blank"
                              },
                              "children": [
                                 "GitHub Docs REST API (list repos for a user)"
                              ]
                           }
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Looking at the request example ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "/users/{username}/repos"
                              ]
                           },
                           " we can see exactly how we need to format our request ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "url"
                              ]
                           },
                           ". We can also see ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "href": "https://docs.github.com/en/rest/using-the-rest-api/using-pagination-in-the-rest-api?apiVersion=2022-11-28#using-link-headers",
                                 "target": "_blank"
                              },
                              "children": [
                                 "elsewhere"
                              ]
                           },
                           " in the documentation that there is next page information that will be in the response ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "Link"
                              ]
                           },
                           " header."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "In the request url parameters, we can include things like ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "per_page=100"
                              ]
                           },
                           " to reduce the number of overall requests that we make."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Due to rate limits, it is wisest to use a ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "href": "https://docs.github.com/en/rest/authentication/authenticating-to-the-rest-api?apiVersion=2022-11-28#authenticating-with-a-personal-access-token",
                                 "target": "_blank"
                              },
                              "children": [
                                 "fine-grained personal access token"
                              ]
                           },
                           " since we'll be repeatedly hitting the endpoint."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Also, it's worth noting that the ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "href": "https://docs.github.com/en/rest/using-the-rest-api/getting-started-with-the-rest-api?apiVersion=2022-11-28#accept",
                                 "target": "_blank"
                              },
                              "children": [
                                 "documentation"
                              ]
                           },
                           " for the ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "Accept"
                              ]
                           },
                           " header states we need to include ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "application/vnd.github+json"
                              ]
                           },
                           " in it."
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "",
                     "id": "/Posts/getting-all-commits#the-initial-request"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "The Initial Request"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "With what we've learned, the first request to get all the repositories for a given user is as follows, you'll see I've incorporated use of a local ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 ".env"
                              ]
                           },
                           " to protect my token."
                        ]
                     },
                     {
                        "type": "em",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "https://api.github.com/users/MoeFingers/repos?per_page=100&page=1"
                        ]
                     },
                     {
                        "type": "SyntaxHighlighter",
                        "props": {
                           "className": "code-container",
                           "class": "code-container",
                           "overridetypeto": "SyntaxHighlighter",
                           "syntaxhighlighterstyle": "xt256"
                        },
                        "children": "async function fetchRepos() {\n    let page = 1;\n  \n    async function fetchPage(page) {\n      return fetch(`https://api.github.com/users/${process.env.USER}/repos?per_page=100&page=${page}`, {\n          method: \"GET\",\n          headers: {\n            \"Authorization\": `token ${process.env.GITHUB_TOKEN}`,\n            \"Content-Type\": \"application/vnd.github+json\",\n          },\n        })\n    }\n  \n    let data = [];\n    let initialResponse = await fetchPage(page);\n    let responseData = await initialResponse.json();\n    data.push(...responseData);\n  \n    while(initialResponse.headers.get('Link') && initialResponse.headers.get('Link').includes('rel=\"next\"')){\n      page++;\n      initialResponse = await fetchPage(page);\n      responseData = await initialResponse.json();\n      data.push(...responseData);\n    }\n  \n    console.log(\"how many repos: \" + data.length);\n    let totalLength = 0;\n    data.forEach(async (repo, index) => {\n      let commits = await fetchCommits(repo.url);\n      totalLength += commits.length;\n      console.log(\"total: \" + totalLength)\n    });\n  }"
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Since all the results fit on one page, there is no information in the ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "Link"
                              ]
                           },
                           " header."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "If we reduce the number of results per page for testing purposes, we can see the ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "Link"
                              ]
                           },
                           " header is now populated."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Knowing this, we can plan to conditionally fetch the next page of results until we're at the last page, where there will be no information in the ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "Link"
                              ]
                           },
                           " header."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "For now, what's important is that we can see each result has an api ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "url"
                              ]
                           },
                           " key on which we can affix ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "/commits?per_page=100&page=1"
                              ]
                           },
                           " to get the commits for that repository."
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "",
                     "id": "/Posts/getting-all-commits#follow-up-request"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "The Follow-Up Request"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "As stated in the previous section, each result has a ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "url"
                              ]
                           },
                           " key on which we can affix ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "/commits?per_page=100&page=1"
                              ]
                           },
                           " to get the commits for that repository."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "We'll use something like this as our address to get: ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "`$",
                                 "{url}",
                                 "/commits?per_page=100&page=$",
                                 "{page}",
                                 "`"
                              ]
                           }
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "You can see in the previous code for our intial request, it follows up by an invocation of ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "fetchCommits"
                              ]
                           },
                           " with each repository ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "url"
                              ]
                           },
                           " as an argument, and then getting the ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "length"
                              ]
                           },
                           " of each return and adding it to a previously declared ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "totalLength"
                              ]
                           },
                           "."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Let's look at that function."
                        ]
                     },
                     {
                        "type": "SyntaxHighlighter",
                        "props": {
                           "className": "code-container",
                           "class": "code-container",
                           "overridetypeto": "SyntaxHighlighter",
                           "syntaxhighlighterstyle": "xt256"
                        },
                        "children": "async function fetchCommits(url) {\n    let page = 1;\n    async function fetchPage(page) {\n      return fetch(`${url}/commits?per_page=100&page=${page}`, {\n          method: \"GET\",\n          headers: {\n            \"Authorization\": `token ${process.env.GITHUB_TOKEN}`,\n            \"Content-Type\": \"application/vnd.github+json\",\n          },\n        })\n    }\n  \n    let data = [];\n    let initialResponse = await fetchPage(page);\n    let responseData = await initialResponse.json();\n    data.push(...responseData);\n  \n    while(initialResponse.headers.get('Link') && initialResponse.headers.get('Link').includes('rel=\"next\"')){\n      page++;\n      initialResponse = await fetchPage(page);\n      responseData = await initialResponse.json();\n      data.push(...responseData);\n    }\n  \n    console.log(url, data.length);\n  \n    return data\n  }"
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "You'll notice the logic for pagination is pretty similar to what we had earlier. This probably isn't very DRY (we're repeating the logic), but that doesn't really matter to me since the entire application is probably less than a hundred lines, and I want to be able to follow the difference in requests."
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "",
                     "id": "/Posts/getting-all-commits#the-output"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "The Output"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Now, when we run the application, we'll get the following output."
                        ]
                     },
                     {
                        "type": "code",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "how many repos: 60\nhttps://api.github.com/repos/moefingers/5.5.5-activity-array-automotive 12\ntotal: 12\n\n{...}\n  \nhttps://api.github.com/repos/moefingers/UNLV-react-art-gallery 6\ntotal: 762\nhttps://api.github.com/repos/moefingers/moefingers.github.io 113\ntotal: 875"
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "",
                     "id": "/Posts/getting-all-commits#afterword"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Afterword"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Now we know at this particular moment I had 875 commits, and ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "href": "https://github.com/MoeFingers/how-many-commits-do-i-have",
                                 "target": "_blank"
                              },
                              "children": [
                                 "here"
                              ]
                           },
                           "'s the link to the repository if you want to try it yourself. Don't hesitate to ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "href": "/#/Contact",
                                 "target": "_blank"
                              },
                              "children": [
                                 "contact"
                              ]
                           },
                           " me if you have any questions."
                        ]
                     }
                  ]
               }
            ]
         }
     },
        {
            "path": "writing-react-posts",
            "title": "Writing and Storing Posts in React...",
            "author":"Mohammad Zuiter",
            "createdAt": "2024-05-26T03:50:29.221Z",
            "updatedAt": "2024-05-26T08:13:27.204Z",
            "reactElementContent": {
               "type": "div",
               "props": {
                  "className": "html-area",
                  "class": "html-area"
               },
               "children": [
                  {
                     "type": "section",
                     "props": {
                        "className": "header",
                        "class": "header"
                     },
                     "children": [
                        {
                           "type": "h1",
                           "props": {
                              "className": "post title",
                              "class": "post title"
                           },
                           "children": [
                              "$$$title$$$"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": "post author",
                              "class": "post author"
                           },
                           "children": [
                              "By: $$$author$$$"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": "post date created",
                              "class": "post date created"
                           },
                           "children": [
                              "Posted: $$$createdAt$$$"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": "post date updated",
                              "class": "post date updated"
                           },
                           "children": [
                              "Last Edited: $$$updatedAt$$$"
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "index",
                        "class": "index"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Index"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/writing-react-posts#intro"
                           },
                           "children": [
                              "intro"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/writing-react-posts#the-html"
                           },
                           "children": [
                              "the html"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/writing-react-posts#the-function"
                           },
                           "children": [
                              "the function"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/writing-react-posts#the-output"
                           },
                           "children": [
                              "the output"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/writing-react-posts#interpretation"
                           },
                           "children": [
                              "json intrepretation"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/writing-react-posts#afterword"
                           },
                           "children": [
                              "afterword and link to try it"
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "intro"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Intro"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "So essentially I wrote an entire program that would recursively interpet children of a given HTML element and spit them all out in JSON."
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/writing-react-posts#the-html"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "The HTML (input)"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "This is an example of the type of HTML I wanted to turn into JSON that could be later interpreted by ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "React.createElement"
                                 ]
                              },
                              "."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "You may notice that there are tokens like ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "$$$"
                                 ]
                              },
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "token$$$"
                                 ]
                              },
                              ". These will be replaced later by other information that I'd provide for each post in the post database."
                           ]
                        },
                        {
                           "type": "SyntaxHighlighter",
                           "props": {
                              "className": "code-container",
                              "class": "code-container",
                              "overridetypeto": "SyntaxHighlighter",
                              "syntaxhighlighterstyle": "xt256"
                           },
                           "children": "<div ref={postElementRef} className='post-content-container'>\n    <section className='header'>\n        <h1 className='post title'>$$$title$$$</h1>\n        <p className=\"post author\">By: $$$author$$$</p>\n        <p className=\"post date created\">Posted: $$$createdAt$$$</p>\n        <p className=\"post date updated\">Last Edited: $$$updatedAt$$$</p>\n    </section>\n    <div className='container'>\n        <div className='child'>hi</div>\n        <div className='child'>hey</div>\n        <div className='child'>hello</div>\n        <div className='child-with-children'>\n            <div className='nested-child'>hola</div>\n            <div className='nested-child'>hehe</div>\n            <div className='nested-child'>omg stop</div>\n        </div>\n    </div>\n</div>"
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/writing-react-posts#the-function"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "The Function"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "So here's the function which will recursively pull out contents of children and their children."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "The expected input is an element, I got that from declaring a constant that invokes ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "React.useRef"
                                 ]
                              },
                              "... ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "const postElementRef = useRef()"
                                 ]
                              },
                              " and then I fed ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "postElementRef.current"
                                 ]
                              },
                              " into this function."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Funny story about this, this function used to read children instead of childNodes. Reading childNodes is important to preserve text siblings, like ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "<div>textsibling<a>nestedelement</a></div>"
                                 ]
                              }
                           ]
                        },
                        {
                           "type": "SyntaxHighlighter",
                           "props": {
                              "className": "code-container",
                              "class": "code-container",
                              "overridetypeto": "SyntaxHighlighter",
                              "syntaxhighlighterstyle": "xt256"
                           },
                           "children": "function readNode(node) {\n    if(node.nodeType == Node.ELEMENT_NODE) {\n        const attributes = {}\n        for(const attribute of node.attributes) {\n            if(attribute.name != \"style\" ){\n              attributes[attribute.name] = attribute.value\n            }\n        }\n        if(attributes.overridetypeto){\n            delete attributes.contentstring\n            return {\n                type: attributes.overridetypeto, \n                props: {\n                    className: node.classList.value, \n                    ...attributes\n                }, \n                children: node.attributes.contentstring.value\n            }\n        }\n        const children = Array.from(node.childNodes).map(readNode)\n        return {\n            type: node.tagName.toLowerCase(), \n            props: {\n                className: node.classList.value,\n                 ...attributes\n                }, \n                children: children\n            }\n    } else if (node.nodeType == Node.TEXT_NODE) {\n        return node.data\n    }\n}"
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/writing-react-posts#the-output"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "The JSON (output)"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Here's the output of the function given the previous input."
                           ]
                        },
                        {
                           "type": "SyntaxHighlighter",
                           "props": {
                              "className": "code-container",
                              "class": "code-container",
                              "overridetypeto": "SyntaxHighlighter",
                              "syntaxhighlighterstyle": "xt256"
                           },
                           "children": "{\n    \"type\": \"div\",\n    \"props\": {\n       \"className\": \"post-content-container\"\n    },\n    \"children\": [\n       {\n          \"type\": \"section\",\n          \"props\": {\n             \"className\": \"header\"\n          },\n          \"children\": [\n             {\n                \"type\": \"h1\",\n                \"props\": {\n                   \"className\": \"post title\"\n                },\n                \"children\": \"$$$title$$$\"\n             },\n             {\n                \"type\": \"p\",\n                \"props\": {\n                   \"className\": \"post author\"\n                },\n                \"children\": \"By: $$$author$$$\"\n             },\n             {\n                \"type\": \"p\",\n                \"props\": {\n                   \"className\": \"post date created\"\n                },\n                \"children\": \"Posted: $$$createdAt$$$\"\n             },\n             {\n                \"type\": \"p\",\n                \"props\": {\n                   \"className\": \"post date updated\"\n                },\n                \"children\": \"Last Edited: $$$updatedAt$$$\"\n             }\n          ]\n       },\n       {\n          \"type\": \"div\",\n          \"props\": {\n             \"className\": \"container\"\n          },\n          \"children\": [\n             {\n                \"type\": \"div\",\n                \"props\": {\n                   \"className\": \"child\"\n                },\n                \"children\": \"hi\"\n             },\n             {\n                \"type\": \"div\",\n                \"props\": {\n                   \"className\": \"child\"\n                },\n                \"children\": \"hey\"\n             },\n             {\n                \"type\": \"div\",\n                \"props\": {\n                   \"className\": \"child\"\n                },\n                \"children\": \"hello\"\n             },\n             {\n                \"type\": \"div\",\n                \"props\": {\n                   \"className\": \"child-with-children\"\n                },\n                \"children\": [\n                   {\n                      \"type\": \"div\",\n                      \"props\": {\n                         \"className\": \"nested-child\"\n                      },\n                      \"children\": \"hola\"\n                   },\n                   {\n                      \"type\": \"div\",\n                      \"props\": {\n                         \"className\": \"nested-child\"\n                      },\n                      \"children\": \"hehe\"\n                   },\n                   {\n                      \"type\": \"div\",\n                      \"props\": {\n                         \"className\": \"nested-child\"\n                      },\n                      \"children\": \"omg stop\"\n                   }\n                ]\n             }\n          ]\n       }\n    ]\n }"
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/writing-react-posts#interpretation"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Interpretation of the JSON by React"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "So now that we have a JSON, we could hypothetically pass it into ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "React.createElement"
                                 ]
                              },
                              " - but it's not that easy."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "React won't know to interpret nested children as new ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "React"
                                 ]
                              },
                              " elements that ought to be passed into another invocation ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "React.createElement"
                                 ]
                              },
                              "."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Can you see where this is going? ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "Recursion"
                                 ]
                              },
                              ". "
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Here's what we came up with, assuming we made a state - ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "const [reactPage, setReactPage] = useState(null)"
                                 ]
                              },
                              " and rendered it later in the ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "JSX"
                                 ]
                              },
                              " as ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "{reactPage}"
                                 ]
                              },
                              "."
                           ]
                        },
                        {
                           "type": "SyntaxHighlighter",
                           "props": {
                              "className": "code-container",
                              "class": "code-container",
                              "overridetypeto": "SyntaxHighlighter",
                              "syntaxhighlighterstyle": "xt256"
                           },
                           "children": "function createReactElement(reactElementContent) {\n    const { type, props, children } = reactElementContent;\n    if(props.class) { delete props.class }\n    if(type == \"SyntaxHighlighter\"){\n        return <SyntaxHighlighter language=\"javascript\" style={xt256}>{children}</SyntaxHighlighter>\n    }\n\n    // If children is a string, wrap it in an array\n    const childrenArray = Array.isArray(children) ? children : [children];\n\n    const elementChildren = childrenArray.map((child) => {\n        // If child is an object, recursively create the React element\n        if (typeof child === 'object') {\n            return createReactElement(child);\n        }\n        // If child is a string, create a text element\n        if (child.includes(\"$$$\")){\n            function replaceThreeDollarToken(fullString, postFromJSON) {\n                return fullString.replace(/${3}([^$]+)${3}/g, (match, group) => {\n                    try {\n                        if (parseISO(postFromJSON[group])) {\n                            return toUserTime(postFromJSON[group]);\n                        }\n                    } catch (error) {\n                        console.log(error)\n                    }\n                    return postFromJSON[group];\n                });\n            }\n\n            child = replaceThreeDollarToken(child, postFromJSON)\n        }\n        return child;\n    });\n\n    const element = createElement(type, props, ...elementChildren);\n    return element;\n}\n\nsetReactPage(createReactElement(postFromJSON.reactElementContent))"
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "You'll note that I'm using parseISO from ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "date-fns"
                                 ]
                              },
                              " to convert ISO strings into dates if possible. "
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Then, if it is possible, my own function ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "toUserTime"
                                 ]
                              },
                              " to convert those dates into user-friendly strings."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "With that out of the way, I can mention what you probably see already, which is a nice RegExp to collect the string between the two ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "$$$"
                                 ]
                              },
                              " and replace the whole \"token\"."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Then, that string is used as a key in the ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "post"
                                 ]
                              },
                              " object to get things like the title, or the dates."
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/writing-react-posts#afterword"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Afterword"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Is it overengineered? Probably. Wanna use the function? Try visiting ",
                              {
                                 "type": "a",
                                 "props": {
                                    "className": "",
                                    "href": "/#/dev",
                                    "target": "_blank"
                                 },
                                 "children": [
                                    "/#/dev"
                                 ]
                              },
                              " on this site."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Wanna see a live example of all that in action? You just did. 🐇"
                           ]
                        }
                     ]
                  }
               ]
            }
        }
    ]
}