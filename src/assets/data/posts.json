{   
   "personLinks": {
      "Vanessa Kasminoff": "https://github.com/VanessaKasminoff"
   },
    "posts": [
        {
            "hide": true,
            "connectedToProject": "moefingers.github.io",
            "path": "portfolio",

            "title": "A Long Journey Through My SPA Blog/Portfolio",
            "author": "alph.test. Mohammad",
            "createdAt": "2024-05-26T01:00:00Z",
            "updatedAt": "2024-05-28T00:16:54.821Z",
            "reactElementContent": {
                "type": "div",
                "props": {
                   "className": "html-area"
                },
                "children": [
                   {
                      "type": "style",
                      "props": {
                         "className": ""
                      },
                      "children": ".html-area {background: green;}"
                   },
                   {
                      "type": "h1",
                      "props": {
                         "className": ""
                      },
                      "children": "$$$title$$$"
                   },
                   {
                      "type": "p",
                      "props": {
                         "className": "post"
                      },
                      "children": "By: $$$author$$$"
                   },
                   {
                      "type": "p",
                      "props": {
                         "className": "post date created"
                      },
                      "children": "Posted: $$$$createdAt$$$"
                   },
                   {
                      "type": "p",
                      "props": {
                         "className": "post date updated"
                      },
                      "children": "Last Edited: $$$$updatedAt$$$"
                   },
                   {
                      "type": "div",
                      "props": {
                         "className": "div test one"
                      },
                      "children": [
                         {
                            "type": "div",
                            "props": {
                               "className": "nested div"
                            },
                            "children": "You may notice this page looks really off. That's by design. It's not done. For now, it's a placeholder. Go see another post instead!"
                         },
                         {
                            "type": "div",
                            "props": {
                               "className": "nested div"
                            },
                            "children": "hey"
                         }
                      ]
                   }
                ]
             }
        },
        {
         "hide": false,
         "connectedToProject": "how-many-commits-do-i-have",
         "path": "getting-all-commits",

         "title": "Getting All Commits For A User in GitHub",
         "author": "Mohammad Zuiter",
         "editor": "Vanessa Kasminoff",
         "createdAt": "2024-05-28T22:05:39.289Z",
         "updatedAt": "2024-05-29T03:47:25.005Z",
         "reactElementContent": {
            "type": "div",
            "props": {
               "className": "html-area",
               "class": "html-area"
            },
            "children": [
               {
                  "type": "section",
                  "props": {
                     "className": "header",
                     "class": "header"
                  },
                  "children": [
                     {
                        "type": "h1",
                        "props": {
                           "className": "post title",
                           "class": "post title"
                        },
                        "children": [
                           "$$$title$$$"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": "post author",
                           "class": "post author"
                        },
                        "children": [
                           "By: $$$author$$$"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": "post editor",
                           "class": "post editor"
                        },
                        "children": [
                           "Editor: ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "editorlinktag": "true"
                              },
                              "children": [
                                 "$$$editor$$$"
                              ]
                           }
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": "post date created",
                           "class": "post date created"
                        },
                        "children": [
                           "Posted: $$$createdAt$$$"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": "post date updated",
                           "class": "post date updated"
                        },
                        "children": [
                           "Last Edited: $$$updatedAt$$$"
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "index",
                     "class": "index"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Index"
                        ]
                     },
                     {
                        "type": "a",
                        "props": {
                           "className": "",
                           "href": "#/Posts/getting-all-commits#intro"
                        },
                        "children": [
                           "Introduction"
                        ]
                     },
                     {
                        "type": "a",
                        "props": {
                           "className": "",
                           "href": "#/Posts/getting-all-commits#the-plan"
                        },
                        "children": [
                           "The Plan"
                        ]
                     },
                     {
                        "type": "a",
                        "props": {
                           "className": "",
                           "href": "#/Posts/getting-all-commits#documentation"
                        },
                        "children": [
                           "Reading The Documentation"
                        ]
                     },
                     {
                        "type": "a",
                        "props": {
                           "className": "",
                           "href": "#/Posts/getting-all-commits#the-initial-request"
                        },
                        "children": [
                           "The Initial Request"
                        ]
                     },
                     {
                        "type": "a",
                        "props": {
                           "className": "",
                           "href": "#/Posts/getting-all-commits#follow-up-request"
                        },
                        "children": [
                           "The Follow-Up Request"
                        ]
                     },
                     {
                        "type": "a",
                        "props": {
                           "className": "",
                           "href": "#/Posts/getting-all-commits#the-output"
                        },
                        "children": [
                           "Seeing The Output"
                        ]
                     },
                     {
                        "type": "a",
                        "props": {
                           "className": "",
                           "href": "#/Posts/getting-all-commits#afterword"
                        },
                        "children": [
                           "Afterword, GitHub Link"
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "",
                     "id": "/Posts/getting-all-commits#intro"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Intro"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "I was applying for a job that highlighted the ability to use GitHub or other version control systems, as well as the ability to use APIs."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "I've used GitHub, and I've had recent experience with their API. So I figured why not pair the two and slap another thing onto my resume."
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "",
                     "id": "/Posts/getting-all-commits#the-plan"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "The Plan"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "From the logic I wrote in my ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "href": "/#/Projects",
                                 "target": "_blank"
                              },
                              "children": [
                                 "Projects"
                              ]
                           },
                           " section, I knew there was a particular url from the API to get all the commits for a particular repository."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "So the plan was, to get all the repositories for a user, then get all the commits for each repository, and finally add them all up."
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "",
                     "id": "/Posts/getting-all-commits#documentation"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Reading The Documentation"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Let's look at the documentation together to find out how to get the repositories for a given user. ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "href": "https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-repositories-for-a-user",
                                 "target": "_blank"
                              },
                              "children": [
                                 "GitHub Docs REST API (list repos for a user)"
                              ]
                           }
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Looking at the request example ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "/users/{username}/repos"
                              ]
                           },
                           " we can see exactly how we need to format our request ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "url"
                              ]
                           },
                           ". We can also see ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "href": "https://docs.github.com/en/rest/using-the-rest-api/using-pagination-in-the-rest-api?apiVersion=2022-11-28#using-link-headers",
                                 "target": "_blank"
                              },
                              "children": [
                                 "elsewhere"
                              ]
                           },
                           " in the documentation that there is next page information that will be in the response ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "Link"
                              ]
                           },
                           " header."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "In the request url parameters, we can include things like ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "per_page=100"
                              ]
                           },
                           " to reduce the number of overall requests that we make."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Due to rate limits, it is wisest to use a ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "href": "https://docs.github.com/en/rest/authentication/authenticating-to-the-rest-api?apiVersion=2022-11-28#authenticating-with-a-personal-access-token",
                                 "target": "_blank"
                              },
                              "children": [
                                 "fine-grained personal access token"
                              ]
                           },
                           " since we'll be repeatedly hitting the endpoint."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Also, it's worth noting that the ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "href": "https://docs.github.com/en/rest/using-the-rest-api/getting-started-with-the-rest-api?apiVersion=2022-11-28#accept",
                                 "target": "_blank"
                              },
                              "children": [
                                 "documentation"
                              ]
                           },
                           " for the ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "Accept"
                              ]
                           },
                           " header states we need to include ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "application/vnd.github+json"
                              ]
                           },
                           " in it."
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "",
                     "id": "/Posts/getting-all-commits#the-initial-request"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "The Initial Request"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "With what we've learned, the first request to get all the repositories for a given user is as follows, you'll see I've incorporated use of a local ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 ".env"
                              ]
                           },
                           " to protect my token."
                        ]
                     },
                     {
                        "type": "em",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "https://api.github.com/users/MoeFingers/repos?per_page=100&page=1"
                        ]
                     },
                     {
                        "type": "SyntaxHighlighter",
                        "props": {
                           "className": "code-container",
                           "class": "code-container",
                           "overridetypeto": "SyntaxHighlighter",
                           "syntaxhighlighterstyle": "xt256"
                        },
                        "children": "async function fetchRepos() {\n    let page = 1;\n  \n    async function fetchPage(page) {\n      return fetch(`https://api.github.com/users/${process.env.USER}/repos?per_page=100&page=${page}`, {\n          method: \"GET\",\n          headers: {\n            \"Authorization\": `token ${process.env.GITHUB_TOKEN}`,\n            \"Content-Type\": \"application/vnd.github+json\",\n          },\n        })\n    }\n  \n    let data = [];\n    let initialResponse = await fetchPage(page);\n    let responseData = await initialResponse.json();\n    data.push(...responseData);\n  \n    while(initialResponse.headers.get('Link') && initialResponse.headers.get('Link').includes('rel=\"next\"')){\n      page++;\n      initialResponse = await fetchPage(page);\n      responseData = await initialResponse.json();\n      data.push(...responseData);\n    }\n  \n    console.log(\"how many repos: \" + data.length);\n    let totalLength = 0;\n    data.forEach(async (repo, index) => {\n      let commits = await fetchCommits(repo.url);\n      totalLength += commits.length;\n      console.log(\"total: \" + totalLength)\n    });\n  }"
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Since all the results fit on one page, there is no information in the ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "Link"
                              ]
                           },
                           " header."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "If we reduce the number of results per page for testing purposes, we can see the ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "Link"
                              ]
                           },
                           " header is now populated."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Knowing this, we can plan to conditionally fetch the next page of results until we're at the last page, where there will be no information in the ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "Link"
                              ]
                           },
                           " header."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "For now, what's important is that we can see each result has an api ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "url"
                              ]
                           },
                           " key on which we can affix ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "/commits?per_page=100&page=1"
                              ]
                           },
                           " to get the commits for that repository."
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "",
                     "id": "/Posts/getting-all-commits#follow-up-request"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "The Follow-Up Request"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "As stated in the previous section, each result has a ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "url"
                              ]
                           },
                           " key on which we can affix ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "/commits?per_page=100&page=1"
                              ]
                           },
                           " to get the commits for that repository."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "We'll use something like this as our address to get: ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "`$",
                                 "{url}",
                                 "/commits?per_page=100&page=$",
                                 "{page}",
                                 "`"
                              ]
                           }
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "You can see in the previous code for our intial request, it follows up by an invocation of ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "fetchCommits"
                              ]
                           },
                           " with each repository ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "url"
                              ]
                           },
                           " as an argument, and then getting the ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "length"
                              ]
                           },
                           " of each return and adding it to a previously declared ",
                           {
                              "type": "em",
                              "props": {
                                 "className": ""
                              },
                              "children": [
                                 "totalLength"
                              ]
                           },
                           "."
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Let's look at that function."
                        ]
                     },
                     {
                        "type": "SyntaxHighlighter",
                        "props": {
                           "className": "code-container",
                           "class": "code-container",
                           "overridetypeto": "SyntaxHighlighter",
                           "syntaxhighlighterstyle": "xt256"
                        },
                        "children": "async function fetchCommits(url) {\n    let page = 1;\n    async function fetchPage(page) {\n      return fetch(`${url}/commits?per_page=100&page=${page}`, {\n          method: \"GET\",\n          headers: {\n            \"Authorization\": `token ${process.env.GITHUB_TOKEN}`,\n            \"Content-Type\": \"application/vnd.github+json\",\n          },\n        })\n    }\n  \n    let data = [];\n    let initialResponse = await fetchPage(page);\n    let responseData = await initialResponse.json();\n    data.push(...responseData);\n  \n    while(initialResponse.headers.get('Link') && initialResponse.headers.get('Link').includes('rel=\"next\"')){\n      page++;\n      initialResponse = await fetchPage(page);\n      responseData = await initialResponse.json();\n      data.push(...responseData);\n    }\n  \n    console.log(url, data.length);\n  \n    return data\n  }"
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "You'll notice the logic for pagination is pretty similar to what we had earlier. This probably isn't very DRY (we're repeating the logic), but that doesn't really matter to me since the entire application is probably less than a hundred lines, and I want to be able to follow the difference in requests."
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "",
                     "id": "/Posts/getting-all-commits#the-output"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "The Output"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Now, when we run the application, we'll get the following output."
                        ]
                     },
                     {
                        "type": "code",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "how many repos: 60\nhttps://api.github.com/repos/moefingers/5.5.5-activity-array-automotive 12\ntotal: 12\n\n{...}\n  \nhttps://api.github.com/repos/moefingers/UNLV-react-art-gallery 6\ntotal: 762\nhttps://api.github.com/repos/moefingers/moefingers.github.io 113\ntotal: 875"
                        ]
                     }
                  ]
               },
               {
                  "type": "section",
                  "props": {
                     "className": "",
                     "id": "/Posts/getting-all-commits#afterword"
                  },
                  "children": [
                     {
                        "type": "h2",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Afterword"
                        ]
                     },
                     {
                        "type": "p",
                        "props": {
                           "className": ""
                        },
                        "children": [
                           "Now we know at this particular moment I had 875 commits, and ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "href": "https://github.com/MoeFingers/how-many-commits-do-i-have",
                                 "target": "_blank"
                              },
                              "children": [
                                 "here"
                              ]
                           },
                           "'s the link to the repository if you want to try it yourself. Don't hesitate to ",
                           {
                              "type": "a",
                              "props": {
                                 "className": "",
                                 "href": "/#/Contact",
                                 "target": "_blank"
                              },
                              "children": [
                                 "contact"
                              ]
                           },
                           " me if you have any questions."
                        ]
                     }
                  ]
               }
            ]
         }
        },
        {
            "path": "writing-react-posts",
            "title": "Writing and Storing Posts in React...",
            "author":"Mohammad Zuiter",
            "createdAt": "2024-05-26T03:50:29.221Z",
            "updatedAt": "2024-05-26T08:13:27.204Z",
            "reactElementContent": {
               "type": "div",
               "props": {
                  "className": "html-area",
                  "class": "html-area"
               },
               "children": [
                  {
                     "type": "section",
                     "props": {
                        "className": "header",
                        "class": "header"
                     },
                     "children": [
                        {
                           "type": "h1",
                           "props": {
                              "className": "post title",
                              "class": "post title"
                           },
                           "children": [
                              "$$$title$$$"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": "post author",
                              "class": "post author"
                           },
                           "children": [
                              "By: $$$author$$$"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": "post date created",
                              "class": "post date created"
                           },
                           "children": [
                              "Posted: $$$createdAt$$$"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": "post date updated",
                              "class": "post date updated"
                           },
                           "children": [
                              "Last Edited: $$$updatedAt$$$"
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "index",
                        "class": "index"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Index"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/writing-react-posts#intro"
                           },
                           "children": [
                              "intro"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/writing-react-posts#the-html"
                           },
                           "children": [
                              "the html"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/writing-react-posts#the-function"
                           },
                           "children": [
                              "the function"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/writing-react-posts#the-output"
                           },
                           "children": [
                              "the output"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/writing-react-posts#interpretation"
                           },
                           "children": [
                              "json intrepretation"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/writing-react-posts#afterword"
                           },
                           "children": [
                              "afterword and link to try it"
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "intro"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Intro"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "So essentially I wrote an entire program that would recursively interpet children of a given HTML element and spit them all out in JSON."
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/writing-react-posts#the-html"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "The HTML (input)"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "This is an example of the type of HTML I wanted to turn into JSON that could be later interpreted by ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "React.createElement"
                                 ]
                              },
                              "."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "You may notice that there are tokens like ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "$$$"
                                 ]
                              },
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "token$$$"
                                 ]
                              },
                              ". These will be replaced later by other information that I'd provide for each post in the post database."
                           ]
                        },
                        {
                           "type": "SyntaxHighlighter",
                           "props": {
                              "className": "code-container",
                              "class": "code-container",
                              "overridetypeto": "SyntaxHighlighter",
                              "syntaxhighlighterstyle": "xt256"
                           },
                           "children": "<div ref={postElementRef} className='post-content-container'>\n    <section className='header'>\n        <h1 className='post title'>$$$title$$$</h1>\n        <p className=\"post author\">By: $$$author$$$</p>\n        <p className=\"post date created\">Posted: $$$createdAt$$$</p>\n        <p className=\"post date updated\">Last Edited: $$$updatedAt$$$</p>\n    </section>\n    <div className='container'>\n        <div className='child'>hi</div>\n        <div className='child'>hey</div>\n        <div className='child'>hello</div>\n        <div className='child-with-children'>\n            <div className='nested-child'>hola</div>\n            <div className='nested-child'>hehe</div>\n            <div className='nested-child'>omg stop</div>\n        </div>\n    </div>\n</div>"
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/writing-react-posts#the-function"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "The Function"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "So here's the function which will recursively pull out contents of children and their children."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "The expected input is an element, I got that from declaring a constant that invokes ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "React.useRef"
                                 ]
                              },
                              "... ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "const postElementRef = useRef()"
                                 ]
                              },
                              " and then I fed ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "postElementRef.current"
                                 ]
                              },
                              " into this function."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Funny story about this, this function used to read children instead of childNodes. Reading childNodes is important to preserve text siblings, like ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "<div>textsibling<a>nestedelement</a></div>"
                                 ]
                              }
                           ]
                        },
                        {
                           "type": "SyntaxHighlighter",
                           "props": {
                              "className": "code-container",
                              "class": "code-container",
                              "overridetypeto": "SyntaxHighlighter",
                              "syntaxhighlighterstyle": "xt256"
                           },
                           "children": "function readNode(node) {\n    if(node.nodeType == Node.ELEMENT_NODE) {\n        const attributes = {}\n        for(const attribute of node.attributes) {\n            if(attribute.name != \"style\" ){\n              attributes[attribute.name] = attribute.value\n            }\n        }\n        if(attributes.overridetypeto){\n            delete attributes.contentstring\n            return {\n                type: attributes.overridetypeto, \n                props: {\n                    className: node.classList.value, \n                    ...attributes\n                }, \n                children: node.attributes.contentstring.value\n            }\n        }\n        const children = Array.from(node.childNodes).map(readNode)\n        return {\n            type: node.tagName.toLowerCase(), \n            props: {\n                className: node.classList.value,\n                 ...attributes\n                }, \n                children: children\n            }\n    } else if (node.nodeType == Node.TEXT_NODE) {\n        return node.data\n    }\n}"
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/writing-react-posts#the-output"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "The JSON (output)"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Here's the output of the function given the previous input."
                           ]
                        },
                        {
                           "type": "SyntaxHighlighter",
                           "props": {
                              "className": "code-container",
                              "class": "code-container",
                              "overridetypeto": "SyntaxHighlighter",
                              "syntaxhighlighterstyle": "xt256"
                           },
                           "children": "{\n    \"type\": \"div\",\n    \"props\": {\n       \"className\": \"post-content-container\"\n    },\n    \"children\": [\n       {\n          \"type\": \"section\",\n          \"props\": {\n             \"className\": \"header\"\n          },\n          \"children\": [\n             {\n                \"type\": \"h1\",\n                \"props\": {\n                   \"className\": \"post title\"\n                },\n                \"children\": \"$$$title$$$\"\n             },\n             {\n                \"type\": \"p\",\n                \"props\": {\n                   \"className\": \"post author\"\n                },\n                \"children\": \"By: $$$author$$$\"\n             },\n             {\n                \"type\": \"p\",\n                \"props\": {\n                   \"className\": \"post date created\"\n                },\n                \"children\": \"Posted: $$$createdAt$$$\"\n             },\n             {\n                \"type\": \"p\",\n                \"props\": {\n                   \"className\": \"post date updated\"\n                },\n                \"children\": \"Last Edited: $$$updatedAt$$$\"\n             }\n          ]\n       },\n       {\n          \"type\": \"div\",\n          \"props\": {\n             \"className\": \"container\"\n          },\n          \"children\": [\n             {\n                \"type\": \"div\",\n                \"props\": {\n                   \"className\": \"child\"\n                },\n                \"children\": \"hi\"\n             },\n             {\n                \"type\": \"div\",\n                \"props\": {\n                   \"className\": \"child\"\n                },\n                \"children\": \"hey\"\n             },\n             {\n                \"type\": \"div\",\n                \"props\": {\n                   \"className\": \"child\"\n                },\n                \"children\": \"hello\"\n             },\n             {\n                \"type\": \"div\",\n                \"props\": {\n                   \"className\": \"child-with-children\"\n                },\n                \"children\": [\n                   {\n                      \"type\": \"div\",\n                      \"props\": {\n                         \"className\": \"nested-child\"\n                      },\n                      \"children\": \"hola\"\n                   },\n                   {\n                      \"type\": \"div\",\n                      \"props\": {\n                         \"className\": \"nested-child\"\n                      },\n                      \"children\": \"hehe\"\n                   },\n                   {\n                      \"type\": \"div\",\n                      \"props\": {\n                         \"className\": \"nested-child\"\n                      },\n                      \"children\": \"omg stop\"\n                   }\n                ]\n             }\n          ]\n       }\n    ]\n }"
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/writing-react-posts#interpretation"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Interpretation of the JSON by React"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "So now that we have a JSON, we could hypothetically pass it into ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "React.createElement"
                                 ]
                              },
                              " - but it's not that easy."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "React won't know to interpret nested children as new ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "React"
                                 ]
                              },
                              " elements that ought to be passed into another invocation ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "React.createElement"
                                 ]
                              },
                              "."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Can you see where this is going? ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "Recursion"
                                 ]
                              },
                              ". "
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Here's what we came up with, assuming we made a state - ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "const [reactPage, setReactPage] = useState(null)"
                                 ]
                              },
                              " and rendered it later in the ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "JSX"
                                 ]
                              },
                              " as ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "{reactPage}"
                                 ]
                              },
                              "."
                           ]
                        },
                        {
                           "type": "SyntaxHighlighter",
                           "props": {
                              "className": "code-container",
                              "class": "code-container",
                              "overridetypeto": "SyntaxHighlighter",
                              "syntaxhighlighterstyle": "xt256"
                           },
                           "children": "function createReactElement(reactElementContent) {\n    const { type, props, children } = reactElementContent;\n    if(props.class) { delete props.class }\n    if(type == \"SyntaxHighlighter\"){\n        return <SyntaxHighlighter language=\"javascript\" style={xt256}>{children}</SyntaxHighlighter>\n    }\n\n    // If children is a string, wrap it in an array\n    const childrenArray = Array.isArray(children) ? children : [children];\n\n    const elementChildren = childrenArray.map((child) => {\n        // If child is an object, recursively create the React element\n        if (typeof child === 'object') {\n            return createReactElement(child);\n        }\n        // If child is a string, create a text element\n        if (child.includes(\"$$$\")){\n            function replaceThreeDollarToken(fullString, postFromJSON) {\n                return fullString.replace(/${3}([^$]+)${3}/g, (match, group) => {\n                    try {\n                        if (parseISO(postFromJSON[group])) {\n                            return toUserTime(postFromJSON[group]);\n                        }\n                    } catch (error) {\n                        console.log(error)\n                    }\n                    return postFromJSON[group];\n                });\n            }\n\n            child = replaceThreeDollarToken(child, postFromJSON)\n        }\n        return child;\n    });\n\n    const element = createElement(type, props, ...elementChildren);\n    return element;\n}\n\nsetReactPage(createReactElement(postFromJSON.reactElementContent))"
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "You'll note that I'm using parseISO from ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "date-fns"
                                 ]
                              },
                              " to convert ISO strings into dates if possible. "
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Then, if it is possible, my own function ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "toUserTime"
                                 ]
                              },
                              " to convert those dates into user-friendly strings."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "With that out of the way, I can mention what you probably see already, which is a nice RegExp to collect the string between the two ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "$$$"
                                 ]
                              },
                              " and replace the whole \"token\"."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Then, that string is used as a key in the ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "post"
                                 ]
                              },
                              " object to get things like the title, or the dates."
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/writing-react-posts#afterword"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Afterword"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Is it overengineered? Probably. Wanna use the function? Try visiting ",
                              {
                                 "type": "a",
                                 "props": {
                                    "className": "",
                                    "href": "/#/dev",
                                    "target": "_blank"
                                 },
                                 "children": [
                                    "/#/dev"
                                 ]
                              },
                              " on this site."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Wanna see a live example of all that in action? You just did. 🐇"
                           ]
                        }
                     ]
                  }
               ]
            }
        },
        {
            "path": "infinity-response",
            "title": "CSS To Get An Infinitely Responsive \"px\"",
            "author":"Mohammad Zuiter",
            "createdAt": "2024-05-29T16:37:57.776Z",
            "updatedAt": "2024-05-29T19:21:01.059Z",
            "reactElementContent": {
               "type": "div",
               "props": {
                  "className": "html-area",
                  "class": "html-area"
               },
               "children": [
                  {
                     "type": "section",
                     "props": {
                        "className": "header",
                        "class": "header"
                     },
                     "children": [
                        {
                           "type": "h1",
                           "props": {
                              "className": "post title",
                              "class": "post title"
                           },
                           "children": [
                              "$$$title$$$"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": "post author",
                              "class": "post author"
                           },
                           "children": [
                              "By: $$$author$$$"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": "post date created",
                              "class": "post date created"
                           },
                           "children": [
                              "Posted: $$$createdAt$$$"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": "post date updated",
                              "class": "post date updated"
                           },
                           "children": [
                              "Last Edited: $$$updatedAt$$$"
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "index",
                        "class": "index"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Index"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/infinity-response#intro"
                           },
                           "children": [
                              "Introduction, The Problem"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/infinity-response#my-situation"
                           },
                           "children": [
                              "My Situation"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/infinity-response#the-plan"
                           },
                           "children": [
                              "The Plan"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/infinity-response#relationship"
                           },
                           "children": [
                              "Finding The Relationship"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/infinity-response#implementation"
                           },
                           "children": [
                              "The Implementation"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/infinity-response#expansion"
                           },
                           "children": [
                              "Expanding The Implentation"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/infinity-response#another-situation"
                           },
                           "children": [
                              "Another Situation??"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/infinity-response#considerations"
                           },
                           "children": [
                              "Accessibility Considerations"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/infinity-response#accessibility-solutions"
                           },
                           "children": [
                              "Accessibility Solutions"
                           ]
                        },
                        {
                           "type": "a",
                           "props": {
                              "className": "",
                              "href": "#/Posts/infinity-response#afterword"
                           },
                           "children": [
                              "Afterword, Real Uses"
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/infinity-response#intro"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Intro, The Problem"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Have you ever been making a set of ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "media queries"
                                 ]
                              },
                              " to have font-size fit in a given width and thought there might be a pattern?"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Well you'd be correct. As developers though, it's not very ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "DRY"
                                 ]
                              },
                              " (Don't Repeat Yourself)."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "What's the problem? It doesn't make sense to have twenty-plus ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "media queries"
                                 ]
                              },
                              " for maximum responsiveness when there is a relationship between width and font-size."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "This does begin to lead us to a solution, although we will first have to identify that relationship."
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/infinity-response#my-situation"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "My Situation"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "On ",
                              {
                                 "type": "a",
                                 "props": {
                                    "className": "",
                                    "href": "https://moefingers.github.io/react-timer-stopwatch-v2/",
                                    "target": "_blank"
                                 },
                                 "children": [
                                    "version 2"
                                 ]
                              },
                              " of my ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "React"
                                 ]
                              },
                              " Stopwatch / Timer combo, I wanted the application to look correct on any screen size. It's very simple, there is a maximum allowable width for a given text."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Given a time such as ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "00:00"
                                 ]
                              },
                              ", I do not want that to ever exceed the width of the screen. You might be questioning the accessibility of that, and we'll get into that later. For now, let me ask you the following:"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "How accessible is it to have half of your text off-screen? "
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Further complicating matters, my application was technically a rectangle, and not a square. And while I could adjust the layout to take advantage of screen ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "orientation"
                                 ]
                              },
                              ", the constraints would fluctuate between ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "width"
                                 ]
                              },
                              " and ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "height"
                                 ]
                              },
                              "."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "I left the full set of original ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "media queries"
                                 ]
                              },
                              " below so you can understand the gravity of the situation."
                           ]
                        },
                        {
                           "type": "SyntaxHighlighter",
                           "props": {
                              "className": "code-container",
                              "class": "code-container",
                              "overridetypeto": "SyntaxHighlighter",
                              "syntaxhighlighterstyle": "xt256"
                           },
                           "children": "@media screen and ( width >= 2000px){\n    :root {\n      --font-size-title: 140px;\n    }\n  }\n  @media screen and ( width >= 1800px) and ( width < 2000px){\n    :root {\n      --font-size-title: 130px;\n    }\n  }\n  @media screen and ( width >= 1600px) and ( width < 1800px){\n    :root {\n      --font-size-title: 116px;\n    }\n  }\n  @media screen and ( width >= 1400px) and ( width < 1600px){\n    :root {\n      --font-size-title: 95px;\n    }\n  }\n  @media screen and ( width >= 1200px) and ( width < 1400px){\n    :root {\n      --font-size-title: 80px;\n    }\n  }\n  @media screen and ( width >= 1000px) and ( width < 1200px){\n    :root {\n      --font-size-title: 70px;\n    }\n  }\n  @media screen and ( width >= 800px) and ( width < 1000px){\n    :root {\n      --font-size-title: 56px;\n    }\n  }\n  @media screen and ( width >= 700px) and ( width < 800px){\n    :root {\n      --font-size-title: 50px;\n    }\n  }\n  @media screen and ( width >= 600px) and ( width < 700px){\n    :root {\n      --font-size-title: 40px;\n    }\n  }\n  @media screen and ( width >= 550px) and ( width < 600px){\n    :root {\n      --font-size-title: 37px;\n    }\n  }\n  @media screen and ( width >= 500px) and ( width < 550px){\n    :root {\n      --font-size-title: 33px;\n    }\n  }\n  @media screen and ( width >= 450px) and ( width < 500px){\n    :root {\n      --font-size-title: 31px;\n    }\n  }\n  @media screen and ( width >= 400px) and ( width < 450px){\n    :root {\n      --font-size-title: 27px;\n    }\n  }\n  @media screen and ( width >= 350px) and ( width < 400px){\n    :root {\n      --font-size-title: 24px;\n    } \n  }\n  @media screen and ( width >= 300px) and ( width < 350px){\n    :root {\n      --font-size-title: 21px;\n    }\n  }\n  @media screen and ( width >= 250px) and ( width < 300px){\n    :root {\n      --font-size-title: 17px;\n    }\n  }\n  @media screen and ( width >= 210px) and ( width < 250px){\n    :root {\n      --font-size-title: 14px;\n    }\n  }\n  @media screen and ( width >= 180px) and ( width < 210px){\n    :root {\n      --font-size-title: 11px;\n    }\n  }\n  @media screen and ( width >= 150px) and ( width < 180px){\n    :root {\n      --font-size-title: 9px;\n    }\n  }\n  @media screen and ( width >= 120px) and ( width < 150px){\n    :root {\n      --font-size-title: 7px;\n    }\n  }\n  @media screen and ( width >= 100px) and ( width < 120px){\n    :root {\n      --font-size-title: 6px;\n    }\n  }\n  @media screen and ( width >= 80px) and ( width < 100px){\n    :root {\n      --font-size-title: 4.5px;\n    }\n  }\n  @media screen and ( width >= 60px) and ( width < 80px){\n    :root {\n      --font-size-title: 3px;\n    }\n  }"
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/infinity-response#the-plan"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "The Plan"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Following the previous point, I knew I needed to identify the unique constraint scenarios. While we will ultimately escape twenty-plus ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "media queries"
                                 ]
                              },
                              ", we will not be escaping more than one."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Keeping that in mind, let's move on to how we're going to get to the solution itself and what the primary objective is right now."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "We need to identify the relationship between ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "font-size"
                                 ]
                              },
                              " and the current ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "width"
                                 ]
                              },
                              ". Fortunately for us, there is something called ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "linear regression"
                                 ]
                              },
                              "."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Now I'm not going to get into the specifics of the math behind that, but I'll tell you that a spreadsheet like ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "Google Sheets"
                                 ]
                              },
                              " can take care of this and some more advanced regressions for us later for us."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "The final goal would be using something like CSS's ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    {
                                       "type": "a",
                                       "props": {
                                          "className": "",
                                          "href": "https://developer.mozilla.org/en-US/docs/Web/CSS/calc",
                                          "target": "_blank"
                                       },
                                       "children": [
                                          "calc (MDN)"
                                       ]
                                    }
                                 ]
                              },
                              " to calculate the ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "font-size"
                                 ]
                              },
                              " based on a given ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "width"
                                 ]
                              },
                              " constraint, which would be known from something like ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "vw"
                                 ]
                              },
                              " (viewport width)."
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/infinity-response#relationship"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Finding The Relationship"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Let's get each smallest ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "width"
                                 ]
                              },
                              " (the minimum width) for each corresponding ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "font-size"
                                 ]
                              },
                              "."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "These values are unique to my situation, but a similar process can be done for other elements, and we will create a factor that can be generalized to other sizes as well."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              {
                                 "type": "a",
                                 "props": {
                                    "className": "",
                                    "href": "https://docs.google.com/spreadsheets/d/1YWHZGA8QqJ0v5L1qUkIltfGuPRdSJtqExeKh91BiiWw/edit?usp=sharing ",
                                    "target": "_blank"
                                 },
                                 "children": [
                                    "Here's a link"
                                 ]
                              },
                              " to that spreadsheet that includes a ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "linear trendline"
                                 ]
                              },
                              "."
                           ]
                        },
                        {
                           "type": "img",
                           "props": {
                              "className": "",
                              "src": "/infinity-response/linear-chart-0.png",
                              "alt": "Two columns representing X and Y values followed by a graph plotting these points and the linear trendline"
                           },
                           "children": []
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Due to human error, not all the dots are exactly on the line, but that's to be expected. What's important and worth noting is that they do generally fall close to the ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "trendline"
                                 ]
                              },
                              "."
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/infinity-response#implementation"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "The Implementation"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Now that we have our formula, let's throw it into ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "calc"
                                 ]
                              },
                              " on the ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "font-size."
                                 ]
                              }
                           ]
                        },
                        {
                           "type": "code",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "css.selector#title { font-size: calc((0.0716 * 100vw) -1.57px); }"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Or better yet, let's set a variable in the ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    ":root"
                                 ]
                              },
                              " element."
                           ]
                        },
                        {
                           "type": "code",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              ":root { --font-size-title: calc((0.0716 * 100vw) -1.57px); }"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Or, somehow even better, we can make a more general size factor to address problems that arise from using ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "px"
                                 ]
                              },
                              " elsewhere (on differently sized devices) such as outlines, placement, or shadows."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Here's an example of what the issue I'm referring to."
                           ]
                        },
                        {
                           "type": "div",
                           "props": {
                              "className": "container-side-by-side",
                              "class": "container-side-by-side"
                           },
                           "children": [
                              {
                                 "type": "img",
                                 "props": {
                                    "className": "",
                                    "src": "/infinity-response/box-shadow-0.png",
                                    "alt": "showing box shadow normal"
                                 },
                                 "children": []
                              },
                              {
                                 "type": "img",
                                 "props": {
                                    "className": "",
                                    "src": "/infinity-response/box-shadow-1.png",
                                    "alt": "showing box shadow oversized"
                                 },
                                 "children": []
                              },
                              {
                                 "type": "img",
                                 "props": {
                                    "className": "",
                                    "src": "/infinity-response/box-shadow-2.png",
                                    "alt": "showing box shadow undersized"
                                 },
                                 "children": []
                              }
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "And the proposed solution to be used."
                           ]
                        },
                        {
                           "type": "code",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              ":root {--general-size-factor-px: (0.00188323 * 100vw);}"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "You'll notice it's pretty much identical except the factor is different. This number can be adjusted to meet any ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "linear"
                                 ]
                              },
                              " need."
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/infinity-response#expansion"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Expanding The Implementation"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "For my unique needs, I needed a factor that would adjust to be dependent on ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "width"
                                 ]
                              },
                              " or ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "height"
                                 ]
                              },
                              " depending on the situation."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "In fact, I had four situations.. "
                           ]
                        },
                        {
                           "type": "img",
                           "props": {
                              "className": "",
                              "src": "/infinity-response/four-situations.png",
                              "alt": "four unique situations including where ratio exceeds 2:1, between 2:1 and 1:1, between 1:1 and 1:2, and exceeding 1:2"
                           },
                           "children": []
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "So here's what I came up with. (I'm reailzing the syntax highlighter that I've chosen struggles, and so I may create one down the road. How hard could it be?)"
                           ]
                        },
                        {
                           "type": "SyntaxHighlighter",
                           "props": {
                              "className": "code-container",
                              "class": "code-container",
                              "overridetypeto": "SyntaxHighlighter",
                              "syntaxhighlighterstyle": "xt256"
                           },
                           "children": "@media screen and ( width < 50vh ) and (orientation:portrait){ /*case 1*/\n.app{\n  width: 100vw;\n  height: 200vw;\n}\n.stopwatch-section, .timer-section {\n  width: 100vw;\n  height: 100vw;\n}\n\n.stopwatch-section{\n  transform: translate(0, 0) rotate(0deg);\n  offset-path: circle(50vw at 50vw 50vh);\n  offset-distance:75%;\n}\n.timer-section{\n  transform: translate(0, 0) rotate(180deg);\n  offset-path: circle(50vw at 50vw 50vh);\n  offset-distance:25%;\n}\n:root {\n  --font-size-title: calc((0.0650 * 100vw) - 1.57px);\n  --general-size-factor-px: (0.00188323 * 100vw);\n}\n.title{\n  offset-path: circle(45% at 50% 50%);\n  offset-distance:75%;\n}\n}\n/* stack using height to avoid exceeding width where vh > 2x vw \nImagine a portrait phone between 1:1 and 1:2*/\n@media screen and ( width >= 50vh ) and (orientation:portrait){\n.app{\n  width: 50vh;\n  height: 100%;\n}\n.stopwatch-section, .timer-section {\n  width: 50vh;\n  height: 50vh;\n}\n\n.stopwatch-section{\n  transform: translate(0, 0) rotate(0deg);\n  offset-path: circle(25vh at 50vw 50vh);\n  offset-distance:75%;\n}\n.timer-section{\n  transform: translate(0, 0) rotate(180deg);\n  offset-path: circle(25vh at 50vw 50vh);\n  offset-distance:25%;\n}\n:root {\n  --font-size-title: calc((0.0650 * 50vh) - 1.57px);\n  --general-size-factor-px: (0.00188323 * 50vh);\n}\n.title{\n  offset-path: circle(45% at 50% 50%);\n  offset-distance:50%;\n}\n}\n\n\n/************** Landscape */\n\n/* stack using width to avoid exceeding height where 2x vh > vw\nImagine a landscape phone between 1:1 and 2:1  */\n@media screen and ( height > 50vw ) and (orientation:landscape) {\n.stopwatch-section, .timer-section {\n  width: 50vw;\n  height: 50vw; \n}\n\n.stopwatch-section{\n  transform: translate(0, 0) rotate(90deg);\n  offset-path: circle(25vw at 50vw 50vh);\n  offset-distance:50%;\n}\n.timer-section{\n  transform: translate(0, 0) rotate(270deg);\n  offset-path: circle(25vw at 50vw 50vh);\n  offset-distance:0%;\n}\n:root {\n  --font-size-title: calc((0.0650 *50vw) - 1.57px);\n  --general-size-factor-px: (0.00188323 * 50vw);\n}\n.title{\n  offset-path: circle(45% at 50% 50%);\n  offset-distance:75%;\n}\n}\n/* stack using height to avoid exceeding width where vw > 2x vh \nImagine a landscape phone more extreme/longer than 2:1*/\n@media screen and ( height <= 50vw ) and (orientation:landscape) {\n.stopwatch-section, .timer-section {\n  width: 100vh;\n  height: 100%; \n}\n\n.stopwatch-section{\n  transform: translate(0, 0) rotate(90deg);\n  offset-path: circle(50vh at 50vw 50vh);\n  offset-distance:50%;\n}\n.timer-section{\n  transform: translate(0, 0) rotate(270deg);\n  offset-path: circle(50vh at 50vw 50vh);\n  offset-distance:0%;\n}\n:root {\n  --font-size-title: calc((0.0650 * 100vh) - 1.57px);\n  --general-size-factor-px: (0.00188323 * 100vh);\n}\n.title{\n  offset-path: circle(45% at 50% 50%);\n  offset-distance:50%;\n}\n}"
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "You'll notice there are some ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "offset-path"
                                 ]
                              },
                              "s, ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "offset-distance"
                                 ]
                              },
                              "s, and some ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "transform: rotate"
                                 ]
                              },
                              "s. This is because I want the two components to animate between going from side by side to on top of one another, following a circular path. This isn't super relevant here and maybe we'll discuss the magic of ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "offset-path"
                                 ]
                              },
                              "s another day."
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/infinity-response#another-situation"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Another Situation??"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Have you ever wanted a set of text which has a changing ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "length"
                                 ]
                              },
                              " of characters to take up a given ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "width"
                                 ]
                              },
                              "?"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Well I have, because depending on which units you choose to display and how many decimal places in the settings of my ",
                              {
                                 "type": "a",
                                 "props": {
                                    "className": "",
                                    "href": "https://moefingers.github.io/react-timer-stopwatch-v2/",
                                    "target": "_blank"
                                 },
                                 "children": [
                                    "stopwatch"
                                 ]
                              },
                              ", there is an unspecified set of characters."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "After the third of ~17 ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "case"
                                 ]
                              },
                              "s in a ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "switch"
                                 ]
                              },
                              ", I recognized there was going to be a relationship between the ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "length"
                                 ]
                              },
                              " of the characters and the ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "font-size"
                                 ]
                              },
                              " I was applying to the element."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Back to the ",
                              {
                                 "type": "a",
                                 "props": {
                                    "className": "",
                                    "href": ""
                                 },
                                 "children": [
                                    "sheets"
                                 ]
                              },
                              " we go... And unlike before, the relationship is now negative and non linear."
                           ]
                        },
                        {
                           "type": "img",
                           "props": {
                              "className": "",
                              "src": "/infinity-response/power-series-chart-0.png",
                              "alt": "plotting power-series"
                           },
                           "children": []
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "I still had a ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "switch"
                                 ]
                              },
                              ", but in this case (no pun intended), it is only to say the ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "font-size"
                                 ]
                              },
                              " should have a maximum if it is below a certain size."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "It's worth noting that to get all the points to fall onto the line, I had to use a ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "power series"
                                 ]
                              },
                              " equation. It was perfect after that."
                           ]
                        },
                        {
                           "type": "SyntaxHighlighter",
                           "props": {
                              "className": "code-container",
                              "class": "code-container",
                              "overridetypeto": "SyntaxHighlighter",
                              "syntaxhighlighterstyle": "xt256"
                           },
                           "children": "let caseResult = 797 * (newPrettyTime.length ** -1.03)\nswitch(newPrettyTime.length) {\n    case 0: case 1: case 2: case 3: case 4: {caseResult = 180; break}\n    default: {caseResult = (730 * (newPrettyTime.length ** -1.03))}\n}\nmainStopwatchTimeElement.current.style.fontSize = `calc(var(--general-size-factor-px) * ${caseResult})` // 12, 62 | 11, 69 | 10, 76 | 9, 83 | 8, 94"
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/infinity-response#considerations"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Accessibility Considerations"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "[\"All of you are shepherds and each of you is responsible for his flock\"]"
                                 ]
                              },
                              {
                                 "type": "a",
                                 "props": {
                                    "className": "",
                                    "href": "https://sunnah.com/adab:212",
                                    "target": "_blank"
                                 },
                                 "children": [
                                    "(source)"
                                 ]
                              },
                              " - Prophet Muhammad (pbuh) "
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "A front-end developer is the shepherd of his front-end, and it falls on his shoulders to ensure that his site meets the needs of those who are less fortunate."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "A critical point was brought to me when I was sharing with ",
                              {
                                 "type": "a",
                                 "props": {
                                    "className": "",
                                    "href": "https://chriscoyier.net/",
                                    "target": "_blank"
                                 },
                                 "children": [
                                    "Chris Coyier"
                                 ]
                              },
                              " these solutions I've created."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "\"Ah so it prevents the text size changing when you zoom? Just as a heads up, that's an accessibility no-no. Clever how it works though.\""
                                 ]
                              }
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "He's correct. A lot of people (including my own dad) rely on and benefit from being able to increase general magnification on a page, which induces a reduction in ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "viewport"
                                 ]
                              },
                              ", causing a static ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "font-size"
                                 ]
                              },
                              " to seem as though it has enlarged."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "There are a few solutions that come to mind."
                           ]
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/infinity-response#accessibility-solutions"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Accessibility Solutions"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "More simply, and what I've done even on the page you're reading, is implement more traditional ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "media queries"
                                 ]
                              },
                              " that apply a factor on top of the factor we created earlier."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Here is two of four ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "media queries"
                                 ]
                              },
                              " regarding this."
                           ]
                        },
                        {
                           "type": "SyntaxHighlighter",
                           "props": {
                              "className": "code-container",
                              "class": "code-container",
                              "overridetypeto": "SyntaxHighlighter",
                              "syntaxhighlighterstyle": "xt256"
                           },
                           "children": "@media screen and (width <= 400px ) {\n    :root {\n      --font-size-factor-px: calc(var(--general-size-factor-px) * 1.2);\n      --enlargeable-font-size-factor-px: calc(var(--font-size-factor-px) * 2);\n    } \n    \n  }\n  \n  @media screen and (width <= 200px ) {\n    :root {\n      --font-size-factor-px: calc(var(--general-size-factor-px) * 1.3);\n      --enlargeable-font-size-factor-px: calc(var(--font-size-factor-px) * 2.5);\n    }\n    \n  }"
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Another potential solution is to simply change the formula and how the ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "font-size"
                                 ]
                              },
                              " scales to be non-linear."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "And a third solution is to just leave it alone, although I argue against this when there are sites that look like this at ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "200px"
                                 ]
                              },
                              "x",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "100px"
                                 ]
                              },
                              "."
                           ]
                        },
                        {
                           "type": "img",
                           "props": {
                              "className": "",
                              "src": "/infinity-response/gmail-200x100.png",
                              "alt": "Gmail at 200 x 100"
                           },
                           "children": []
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "props": {
                        "className": "",
                        "id": "/Posts/infinity-response#afterword"
                     },
                     "children": [
                        {
                           "type": "h2",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "Afterword, Real Uses"
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "As mentioned before, when you have a fixed constraint for a single line of text, like in my ",
                              {
                                 "type": "a",
                                 "props": {
                                    "className": "",
                                    "href": "https://moefingers.github.io/react-timer-stopwatch-v2/",
                                    "target": "_blank"
                                 },
                                 "children": [
                                    "stopwatch"
                                 ]
                              },
                              ", these solutions are great."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "There is notable benefit in using these for other styling elements that use ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "px"
                                 ]
                              },
                              " values, or general placement on screen as well."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "For text that changes in length where you don't want to waste space, an often but not necessarily non-linear solution can be pursued."
                           ]
                        },
                        {
                           "type": "p",
                           "props": {
                              "className": ""
                           },
                           "children": [
                              "And lastly, for bodies of text that can survive enlargement by ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "text-wrap"
                                 ]
                              },
                              ", a factor should be applied or those ",
                              {
                                 "type": "em",
                                 "props": {
                                    "className": ""
                                 },
                                 "children": [
                                    "font-size"
                                 ]
                              },
                              "s should just be left alone."
                           ]
                        }
                     ]
                  }
               ]
            }
        }
    ]
}